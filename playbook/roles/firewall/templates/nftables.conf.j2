#!/usr/sbin/nft -f

flush ruleset

table ip filter {
    chain input {
        type filter hook input priority 200; policy drop;

        # accept by state
        ct state related,established counter accept        

        # accept by interface
        iif lo accept
{% for iface in interfaces %}
{% if iface["lan"] == true %}
        iif {{ iface["name"] }} counter accept
{% endif %}
{% endfor %}

        # accept by saddr
{% for network in networks %}
{% if network.get("vpn") == true %}
        iifname "{{ pppoe["ppp-interface"] }}" ip saddr {{ network["network"] }} counter drop
        iifname "ppp*" ip saddr {{ network["network"] }} counter accept
{% endif %}
{% endfor %}

        # accept by port
{% if vpn is defined %}
        udp dport 500 counter accept
        udp dport 1701 counter accept
        udp dport 4500 counter accept
{% endif %}
    }
    
    chain forward {
        type filter hook forward priority 200; policy drop;

        ct state related,established counter accept        

        # accept for lan to wan
{% for network in networks %}
{% if network["lan"] == true %}
        ip saddr {{ network["network"] }} tcp flags & (syn|rst) == syn counter tcp option maxseg size set rt mtu
        ip saddr {{ network["network"] }} oifname "{{ pppoe["ppp-interface"] }}" counter accept
{% endif %}
{% endfor %}

        # accept for lan to lan
{% for nw1 in networks %}
{% if nw1["lan"] == true %}
{% for nw2 in networks %}
{% if nw2["lan"] == true and nw1["network"] != nw2["network"] %}
        ip saddr {{ nw1["network"] }} ip daddr {{ nw2["network"] }} counter accept
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}

    }
    
    chain output {
        type filter hook output priority 200; policy accept;
    }
}

table ip nat {
    chain prerouting {
        type nat hook prerouting priority 100;
    }

    chain input {
        type nat hook input priority 300; policy accept;
    }

    chain output {
        type nat hook output priority 100; policy accept;
    }

    chain postrouting {
        type nat hook postrouting priority 300; policy accept;

{% for network in networks %}
{% if network["lan"] == true %}
        ip saddr {{ network["network"] }} oifname "{{ pppoe["ppp-interface"] }}" masquerade
{% endif %}
{% endfor %}
    }
}

table ip6 filter {
    chain input {
        type filter hook input priority 200; policy drop;

        ct state related,established counter accept

        icmpv6 type {
            destination-unreachable,
            echo-reply,
            echo-request,
            nd-neighbor-advert,
            nd-neighbor-solicit,
            nd-router-advert,
            nd-router-solicit,
            packet-too-big,
            parameter-problem,
            time-exceeded
        } counter accept

        iif lo accept
{% for iface in interfaces %}
{% if iface["lan"] == true %}
        iif {{ iface["name"] }} accept
{% endif %}
{% endfor %}
{% if ipv6 is defined %}
        udp dport 546 counter accept
        udp dport 547 counter accept
{% endif %}
    }

    chain forward {
        type filter hook forward priority 0; policy drop;

        ct state related,established counter accept

        icmpv6 type {
            destination-unreachable,
            echo-reply,
            echo-request,
            nd-neighbor-advert,
            nd-neighbor-solicit,
            nd-router-advert,
            nd-router-solicit,
            packet-too-big,
            parameter-problem,
            time-exceeded
        } accept

{% for iface in interfaces %}
{% if iface["lan"] == true %}
        iif {{ iface["name"] }} accept
{% endif %}
{% endfor %}
    }

    chain output {
        type filter hook output priority 0; policy accept; 
    }
}

table ip6 nat {
    chain prerouting {
        type nat hook prerouting priority 100; policy accept;
    }
    
    chain input {
        type nat hook input priority 300; policy accept;
    }

    chain output {
        type nat hook output priority 100; policy accept;
    }

    chain postrouting {
        type nat hook postrouting priority 300; policy accept;

{% if ipv6 is defined %}
{% for network in networks6 %}
{% if network["lan"] == true %}
        ip6 saddr {{ network["network"] }} oif {{ ipv6["external-interface"] }} counter masquerade
{% endif %}
{% endfor %}
{% endif %}

    }
}
